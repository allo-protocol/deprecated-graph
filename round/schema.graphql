
########################
# == Helper Entities == #
########################

type MetaPtr @entity {
  id: ID!
  protocol: Int,
  pointer: String
}


#######################
# == Allo Settings == #
#######################

type AlloSettings @entity {
  id: ID!
  protocolFeePercentage: Int!
  protocolTreasury: String!
}

########################
# ===== Program ===== #
########################

# id = programAddress.toHex()
type Program @entity {
  id: ID!
  roles: [ProgramRole!]! @derivedFrom(field: "program")
  accounts: [ProgramAccount!]! @derivedFrom(field: "program")
  rounds: [Round!]! @derivedFrom(field: "program")
  metaPtr: MetaPtr! # id = "metaPtr-{programAddress.toHex()}"
  createdAt: BigInt!
  updatedAt: BigInt!
}

# id = program.toHex()-role.toHex()
type ProgramRole @entity {
  id: ID!
  role: String!
  accounts: [ProgramAccount!] @derivedFrom(field: "role")
  program: Program!
}

# id = keccak256(Program.id, Role.role, _account.address)
type ProgramAccount @entity {
  id: ID!
  address: String!
  role: ProgramRole!
  program: Program!
}


########################
# ===== Round ===== #
########################

# id = roundAddress.toHex()
type Round @entity {
  id: ID!
  program: Program!
  roles: [RoundRole!]! @derivedFrom(field: "round")
  accounts: [RoundAccount!]! @derivedFrom(field: "round")
  projects: [RoundApplication!] @derivedFrom(field: "round")
  votingStrategy: String!
  payoutStrategy: PayoutStrategy!
  applicationsStartTime: String!
  applicationsEndTime: String!
  roundStartTime: String!
  roundEndTime: String!
  token: String!
  matchAmount: BigInt!
  roundFeePercentage: BigInt!
  roundFeeAddress: String!
  roundMetaPtr: MetaPtr! # id = "roundMetaPtr-{roundAddress.toHex()}"
  applicationMetaPtr: MetaPtr! # id = "applicationMetaPtr-{roundAddress.toHex()}"
  projectsMetaPtr: MetaPtr # id = "projectsMetaPtr-{roundAddress.toHex()}"
  createdAt: BigInt!
  updatedAt: BigInt!
  version: String!
}

# id = round.toHex()-role.toHex()
type RoundRole @entity {
  id: ID!
  role: String!
  accounts: [RoundAccount!] @derivedFrom(field: "role")
  round: Round!
}

# id = keccak256(Round.id, RoundRole.role, _account.address)
type RoundAccount @entity {
  id: ID!
  address: String!
  role: RoundRole!
  round: Round!
}

# id: round.toHex()-applicationIndex.toString()
type RoundApplication @entity {
  id: ID!
  project: String!
  applicationIndex: Int!
  status: Int!
  metaPtr: MetaPtr!
  round: Round!
  payoutAddress: String
  createdAt: BigInt!
  updatedAt: BigInt!
}

######################
# = PayoutStrategy = #
######################

# id = payoutContractAddress.toHex()
type PayoutStrategy @entity {
  id: ID!
  strategyName: String!
  strategyAddress: String!
  round: Round @derivedFrom(field: "payoutStrategy")
  payouts: [Payout!] @derivedFrom(field: "payoutStrategy")
  isReadyForPayout: Boolean!
  distributionMetaPtr: MetaPtr # id = "distributionMetaPtr-{payoutContractAddress.toHex()}"
  version: String!
  createdAt: BigInt!
  updatedAt: BigInt!
}

# id = keccak256(event.receipt.transactionHash.toHex(), Payout.projectId)
type Payout @entity {
  id: ID!
  payoutStrategy: PayoutStrategy!
  version: String!
  createdAt: BigInt!
  amount: BigInt!
  token: String!
  grantee: String!
  projectId: String!
  txnHash: String!
  # round: Round!
}